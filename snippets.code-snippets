{
    // GENERIC SNIPPETS 
    "SingletonClass": {
        "prefix": "singletonclass",
        "description": "Create the skeleton of a Singleton class",
        "body": [
            "class ${2:ClassName} {",
            "  ${2:ClassName}._internal();",
            "  factory ${2:ClassName}() => _instance;",
            "  static final ${2:ClassName} _instance = ${2:ClassName}._internal();",
            "",
            "  bool _initialized = false;",
            "",
            "  /// You must call this method before using this service",
            "  void ensureInitialized() {",
            "    if (_initialized) return;",
            "    _initialized = true;",
            "    _init();",
            "  }",
            "",
            "  void _init() {",
            "    throw UnimplementedError(",
            "      \"Add the code needed to initialise your Singleton. If you don't need an init, you can delete everything under 'bool _initialized = false;'\",",
            "    );",
            "  }",
            "}"
        ],
    },
    "Extension": {
        "prefix": "extensionEnumOrClass",
        "description": "Extend the fonctionnality of an existing class or enum",
        "body": [
            "extension ${3:ExtensionName} on ${2:EnumOrClassToExtend} {",
            "  String get ${4:ExtensionKeyWord} {",
            "    switch (this) {",
            "    }",
            "  }",
            "}"
        ]
    },
    "tryCatchSentry": {
        "prefix": "tryCatchSentry",
        "description": "try catch with Sentry exception and a finally block",
        "body": [
            "   try {",
            "",
            "   } catch (exception, stackTrace) {",
            "     Sentry.captureException(exception, stackTrace: stackTrace);",
            "     change(null, status: RxStatus.error());",
            "   }"
        ]
    },
    "SwitchStatement": {
        "prefix": "switch",
        "description": "Insert a Dart switch statement",
        "body": [
            "switch (${1:expression}) {",
            "  case ${2:value}:",
            "    throw UnimplementedError();",
            "    break;",
            "  default:",
            "    throw UnimplementedError();",
            "}"
        ]
    },
    "ForLoop": {
        "prefix": "for",
        "description": "Iterates with max counter",
        "body": [
            "for (var i = 0; i < ${1:counter}; i++) {",
            "",
            "}"
        ]
    },
    "ForInLoop": {
        "prefix": "for in",
        "description": "Iterates over data list",
        "body": [
            "for (var item in ${1:iterable}) {",
            "",
            "}"
        ]
    },
    "mockDioWhen": {
        "prefix": "mockDio When",
        "description": "Iterates over data list",
        "body": [
            " when(",
            "  mockDio.post(",
            "   queryRoute,",
            "     data: anyNamed('data'),",
            "    queryParameters: anyNamed(\"queryParameters\"),",
            "     options: anyNamed(\"options\"),",
            "  ),",
            "   ).thenAnswer(",
            "   (_) async => Response(",
            "  requestOptions: RequestOptions(path: queryRoute),",
            "    data: expectedData,",
            "  statusCode: 200,",
            " ),",
            " );"
        ]
    },
    "mockDioExpectedDataWhen": {
        "prefix": "mockDio ExpectedData When",
        "description": "Iterates over data list",
        "body": [
            "final expectedData = {",
            "  \"data\":[],",
            " \"meta\": generateMockMeta(total: 3).toJson(),",
            "      };",
            "",
            " when(",
            "  mockDio.post(",
            "   queryRoute,",
            "     data: anyNamed('data'),",
            "    queryParameters: anyNamed(\"queryParameters\"),",
            "     options: anyNamed(\"options\"),",
            "  ),",
            "   ).thenAnswer(",
            "   (_) async => Response(",
            "  requestOptions: RequestOptions(path: queryRoute),",
            "    data: expectedData,",
            "  statusCode: 200,",
            " ),",
            " );"
        ]
    },
    // "useCase": {
    //     "prefix": "useCase",
    //     "description": "Create the skeleton of a useCase file",
    //     "body": [
    //         "class ${2:ActionName}UseCase {",
    //         "  Repository repository;",
    //         "",
    //         "  ${2:ActionName}UseCase({required this.repository});",
    //         "",
    //         "  bool ${2:ActionName}(Entity entity) {",
    //         "    if (_can${2:ActionName}(entity)) {",
    //         "      return _${2:ActionName}Call(entity);",
    //         "    } else {",
    //         "      return false;",
    //         "    }",
    //         "  }",
    //         "",
    //         "  bool _can${2:ActionName}(Entity entity) {",
    //         "    throw UnimplementedError();",
    //         "  }",
    //         "",
    //         "  bool _${2:ActionName}Call(Entity entity) {",
    //         "    throw UnimplementedError();",
    //         "  }",
    //         "}"
    //     ]
    // },
    // "FakeRepositorySingletonWithSoftDelete": {
    //     "prefix": "fakeRepositoryWithSoftDelete",
    //     "description": "Singleton FakeRepository with in-memory fake database",
    //     "body": [
    //         "import 'package:yotta_city/data/dto/${3:ClassNameWithoutMaj}_dto.dart',",
    //         "import 'package:yotta_city/domain/mapper/${3:ClassNameWithoutMaj}_mapper.dart',",
    //         "import 'package:yotta_city/domain/${3:ClassNameWithoutMaj}/entity/${3:ClassNameWithoutMaj}.dart',",
    //         "",
    //         "class ${2:ClassName}Repository {",
    //         "  ${2:ClassName}Repository._internal() {",
    //         "    _fakeDatabase = List.generate(",
    //         "      5,",
    //         "      (index) => ${2:ClassName}Mapper().convert(${2:ClassName}.faker(seed: index)),",
    //         "    );",
    //         "  }",
    //         "",
    //         "  static final ${2:ClassName}Repository _singleton =",
    //         "      ${2:ClassName}Repository._internal();",
    //         "",
    //         "  factory ${2:ClassName}Repository() {",
    //         "    return _singleton;",
    //         "  }",
    //         "",
    //         "  int _count = 0;",
    //         "  String get _uniqueId => \"${2:ClassName}_\\$_count\";",
    //         "  late final List<${2:ClassName}Dto> _fakeDatabase;",
    //         "",
    //         "  ${2:ClassName} add${2:ClassName}(${2:ClassName} ${3:ClassNameWithoutMaj}) {",
    //         "    _count++;",
    //         "    _fakeDatabase.add(",
    //         "      ${2:ClassName}Mapper().convert(",
    //         "        ${3:ClassNameWithoutMaj}.copyWith(",
    //         "          id: _uniqueId,",
    //         "        ),",
    //         "      ),",
    //         "    );",
    //         "    return ${3:ClassNameWithoutMaj};",
    //         "  }",
    //         "",
    //         "  bool update${2:ClassName}(${2:ClassName} ${3:ClassNameWithoutMaj}) {",
    //         "    final index = _fakeDatabase.indexWhere((dto) => dto.id == ${3:ClassNameWithoutMaj}.id);",
    //         "    bool is${2:ClassName}InDatabase() => index != -1;",
    //         "",
    //         "    if (is${2:ClassName}InDatabase()) {",
    //         "      final ${2:ClassName}Dto updated${2:ClassName} = ${2:ClassName}Mapper().convert(",
    //         "        ${3:ClassNameWithoutMaj},",
    //         "      );",
    //         "",
    //         "      _fakeDatabase[index] = updated${2:ClassName};",
    //         "      return true;",
    //         "    } else {",
    //         "      return false;",
    //         "    }",
    //         "  }",
    //         "",
    //         "  bool remove${2:ClassName}(${2:ClassName} ${3:ClassNameWithoutMaj}) {",
    //         "    if (_fakeDatabase.any(",
    //         "      (${3:ClassNameWithoutMaj}Dto) => ${3:ClassNameWithoutMaj}Dto.id == ${3:ClassNameWithoutMaj}.id,",
    //         "    )) {",
    //         "      return update${2:ClassName}(${3:ClassNameWithoutMaj}.copyWith(isDeleted: true));",
    //         "    } else {",
    //         "      return false;",
    //         "    }",
    //         "  }",
    //         "",
    //         "  bool undoRemove${2:ClassName}(${2:ClassName} ${3:ClassNameWithoutMaj}) {",
    //         "    if (_fakeDatabase.any(",
    //         "      (${3:ClassNameWithoutMaj}Dto) => ${3:ClassNameWithoutMaj}Dto.id == ${3:ClassNameWithoutMaj}.id,",
    //         "    )) {",
    //         "      return update${2:ClassName}(${3:ClassNameWithoutMaj}.copyWith(isDeleted: false));",
    //         "    } else {",
    //         "      return false;",
    //         "    }",
    //         "  }",
    //         "",
    //         "  ${2:ClassName}? get${2:ClassName}ById(String ${3:ClassNameWithoutMaj}Id) {",
    //         "    if (_fakeDatabase.any((${3:ClassNameWithoutMaj}) => ${3:ClassNameWithoutMaj}.id == ${3:ClassNameWithoutMaj}Id)) {",
    //         "      return ${2:ClassName}Mapper().convert(",
    //         "        _fakeDatabase.firstWhere(",
    //         "          (${3:ClassNameWithoutMaj}) =>",
    //         "              ${3:ClassNameWithoutMaj}.id == ${3:ClassNameWithoutMaj}Id && ${3:ClassNameWithoutMaj}.isDeleted == false,",
    //         "        ),",
    //         "      );",
    //         "    }",
    //         "    return null;",
    //         "  }",
    //         "",
    //         "  List<${2:ClassName}> _get${2:ClassName}ListWhere({",
    //         "    required bool Function(${2:ClassName}) filter,",
    //         "    int pageNumber = 1,",
    //         "    int quantityPerPage = 10,",
    //         "  }) {",
    //         "    var filteredResult =",
    //         "        _fakeDatabase",
    //         "            .map(",
    //         "              (dto) =>",
    //         "                  ${2:ClassName}Mapper().convert<${2:ClassName}Dto, ${2:ClassName}>(dto),",
    //         "            )",
    //         "            .where((${3:ClassNameWithoutMaj}) => ${3:ClassNameWithoutMaj}.isDeleted == false)",
    //         "            .where(filter)",
    //         "            .toList();",
    //         "",
    //         "// // Backend filter",
    //         " // filteredResult.sort(",
    //         "//   (a, b) => a.title.toLowerCase().compareTo(b.title.toLowerCase()),",
    //         "// );",
    //         "",
    //         "    int pageStartIndex = (pageNumber - 1) * quantityPerPage;",
    //         "    int pageEndIndex = pageStartIndex + quantityPerPage;",
    //         "",
    //         "    if (pageStartIndex >= filteredResult.length) {",
    //         "      return [];",
    //         "    }",
    //         "",
    //         "    return filteredResult.sublist(",
    //         "      pageStartIndex,",
    //         "      pageEndIndex.clamp(0, filteredResult.length),",
    //         "    );",
    //         "  }",
    //         "",
    //         "  List<${2:ClassName}> get${2:ClassName}List({",
    //         "    bool Function(${2:ClassName})? filter,",
    //         "    int pageNumber = 1,",
    //         "    int quantityPerPage = 10,",
    //         "  }) {",
    //         "    return _get${2:ClassName}ListWhere(",
    //         "      pageNumber: pageNumber,",
    //         "      quantityPerPage: quantityPerPage,",
    //         "      filter: filter ?? (${3:ClassNameWithoutMaj}) => ${3:ClassNameWithoutMaj}.isDeleted == false,",
    //         "    );",
    //         "  }",
    //         "}"
    //     ]
    // },
    // "FakeRepositorySingleton": {
    //     "prefix": "fakeRepository",
    //     "description": "Singleton FakeRepository with in-memory fake database",
    //     "body": [
    //         "import 'package:yotta_city/data/dto/${3:ClassNameWithoutMaj}_dto/${3:ClassNameWithoutMaj}_dto.dart';",
    //         "import 'package:yotta_city/domain/${3:ClassNameWithoutMaj}/mapper/${3:ClassNameWithoutMaj}_mapper.dart';",
    //         "import 'package:yotta_city/domain/${3:ClassNameWithoutMaj}/${3:ClassNameWithoutMaj}.dart';",
    //         "",
    //         "class ${2:ClassName}Repository {",
    //         "  ${2:ClassName}Repository._internal() {",
    //         "    _fakeDatabase = List.generate(",
    //         "      5,",
    //         "      (index) => ${2:ClassName}Mapper().convert(${2:ClassName}.faker(seed: index)),",
    //         "    );",
    //         "  }",
    //         "",
    //         "  static final ${2:ClassName}Repository _singleton = ${2:ClassName}Repository._internal();",
    //         "",
    //         "  factory ${2:ClassName}Repository() {",
    //         "    return _singleton;",
    //         "  }",
    //         "",
    //         "  int _count = 0;",
    //         "  String get _uniqueId => \"${2:ClassName}_\\$_count\";",
    //         "  late final List<${2:ClassName}Dto> _fakeDatabase;",
    //         "",
    //         "  ${2:ClassName} add${2:ClassName}(${2:ClassName} ${3:ClassNameWithoutMaj}) {",
    //         "    _count++;",
    //         "    _fakeDatabase.add(${2:ClassName}Mapper().convert(${3:ClassNameWithoutMaj}.copyWith(id: _uniqueId)));",
    //         "    return ${3:ClassNameWithoutMaj};",
    //         "  }",
    //         "",
    //         "  bool update${2:ClassName}(${2:ClassName} ${3:ClassNameWithoutMaj}) {",
    //         "    final index = _fakeDatabase.indexWhere((dto) => dto.id == ${3:ClassNameWithoutMaj}.id);",
    //         "    bool is${2:ClassName}InDatabase() => index != -1;",
    //         "",
    //         "    if (is${2:ClassName}InDatabase()) {",
    //         "      final ${2:ClassName}Dto updated${2:ClassName} = ${2:ClassName}Mapper().convert(${3:ClassNameWithoutMaj});",
    //         "",
    //         "      _fakeDatabase[index] = updated${2:ClassName};",
    //         "      return true;",
    //         "    } else {",
    //         "      return false;",
    //         "    }",
    //         "  }",
    //         "",
    //         "  bool remove${2:ClassName}(${2:ClassName} ${3:ClassNameWithoutMaj}) {",
    //         "    if (_fakeDatabase.any((${3:ClassNameWithoutMaj}Dto) => ${3:ClassNameWithoutMaj}Dto.id == ${3:ClassNameWithoutMaj}.id)) {",
    //         "      return _fakeDatabase.remove(",
    //         "        _fakeDatabase.firstWhere(",
    //         "          (reservationDto) => reservationDto.id == ${3:ClassNameWithoutMaj}.id,",
    //         "        ),",
    //         "      );",
    //         "    } else {",
    //         "      return false;",
    //         "    }",
    //         "  }",
    //         "",
    //         "  ${2:ClassName}? get${2:ClassName}ById(String ${3:ClassNameWithoutMaj}Id) {",
    //         "    if (_fakeDatabase.any((${3:ClassNameWithoutMaj}) => ${3:ClassNameWithoutMaj}.id == ${3:ClassNameWithoutMaj}Id)) {",
    //         "      return ${2:ClassName}Mapper().convert(",
    //         "        _fakeDatabase.firstWhere((${3:ClassNameWithoutMaj}) => ${3:ClassNameWithoutMaj}.id == ${3:ClassNameWithoutMaj}Id),",
    //         "      );",
    //         "    }",
    //         "    return null;",
    //         "  }",
    //         "",
    //         "  List<${2:ClassName}> _get${2:ClassName}ListWhere({",
    //         "    required bool Function(${2:ClassName}) filter,",
    //         "    int pageNumber = 1,",
    //         "    int quantityPerPage = 10,",
    //         "  }) {",
    //         "    var filteredResult =",
    //         "        _fakeDatabase",
    //         "            .map((dto) => ${2:ClassName}Mapper().convert<${2:ClassName}Dto, ${2:ClassName}>(dto))",
    //         "            .where(filter)",
    //         "            .toList();",
    //         "",
    //         "    int pageStartIndex = (pageNumber - 1) * quantityPerPage;",
    //         "    int pageEndIndex = pageStartIndex + quantityPerPage;",
    //         "",
    //         "    if (pageStartIndex >= filteredResult.length) {",
    //         "      return [];",
    //         "    }",
    //         "",
    //         "    return filteredResult.sublist(",
    //         "      pageStartIndex,",
    //         "      pageEndIndex.clamp(0, filteredResult.length),",
    //         "    );",
    //         "  }",
    //         "",
    //         "  List<${2:ClassName}> get${2:ClassName}List({",
    //         "    bool Function(${2:ClassName})? filter,",
    //         "    int pageNumber = 1,",
    //         "    int quantityPerPage = 10,",
    //         "  }) {",
    //         "    return _get${2:ClassName}ListWhere(",
    //         "      pageNumber: pageNumber,",
    //         "      quantityPerPage: quantityPerPage,",
    //         "      filter: filter ?? (${3:ClassNameWithoutMaj}) => true,",
    //         "    );",
    //         "  }",
    //         "}"
    //     ]
    // },
    "WidgetController_Test": {
        "prefix": "widgetController_Test",
        "description": "Create the skeleton of a widget test file",
        "body": []
    },
    // "ViewController_Test": {
    //     "prefix": "viewController_Test",
    //     "description": "Create the skeleton of a unit test file for a controller",
    //     "body": [
    //         "import 'package:dartz/dartz.dart';",
    //         "import 'package:flutter_test/flutter_test.dart';",
    //         "import 'package:get/get.dart';",
    //         "import 'package:mockito/annotations.dart';",
    //         "import 'package:mockito/mockito.dart';",
    //         "",
    //         "import '${TM_FILENAME_BASE}.mocks.dart';",
    //         "",
    //         "@GenerateNiceMocks([MockSpec<${2:DependencieName}>()])",
    //         "void main() {",
    //         "",
    //         "TestWidgetsFlutterBinding.ensureInitialized();",
    //         "late ${1:ClassName} controller;",
    //         "",
    //         "late ${2:DependencieName} mock${2:DependencieName};",
    //         "",
    //         "setUpAll(() {",
    //         "Get.testMode = true;",
    //         "mock${2:DependencieName} = Mock${2:DependencieName}();",
    //         "",
    //         "controller = ${1:ClassName}(dependencie: mock${2:DependencieName});",
    //         "});",
    //         "",
    //         "group('tested_function_name', () {",
    //         "",
    //         "    setUp(() {",
    //         "      // Reset all parameters between tests in this group",
    //         "    });",
    //         "",
    //         "    test('  (Nominal Case)', () async {});",
    //         "",
    //         "});",
    //         "}"
    //     ]
    // },
    "ViewController_TestWithDio": {
        "prefix": "viewController_TestWithDio",
        "description": "Create the skeleton of a unit test file for a controller with dio and dioService mocked",
        "body": [
            "import 'package:connectivity_plus/connectivity_plus.dart';",
            "import 'package:flutter_test/flutter_test.dart';",
            "import 'package:get/get_navigation/get_navigation.dart';",
            "import 'package:get/instance_manager.dart';",
            "import 'package:dio/dio.dart';",
            "import 'package:mockito/annotations.dart';",
            "import 'package:mockito/mockito.dart';",
            "",
            "import '${TM_FILENAME_BASE}.mocks.dart';",
            "",
            "@GenerateNiceMocks([MockSpec<Dio>(), MockSpec<Connectivity>()])",
            "void main() {",
            "  TestWidgetsFlutterBinding.ensureInitialized();",
            "",
            "  late ${2:TestControllerClass} controller;",
            "  late Connectivity mockConnectivity;",
            "  late Dio mockDio;",
            "  late MockDioService dioService;",
            "",
            "  setUpAll(() {",
            "    Get.testMode = true;",
            "",
            "    mockDio = MockDio();",
            "    dioService = MockDioService(mockDio);",
            "    Get.put(mockDio, tag: 'congesClient');",
            "",
            "   mockConnectivity = MockConnectivity();",
            "   Get.put<Connectivity>(mockConnectivity);",
            "   when(",
            "     mockConnectivity.checkConnectivity(),",
            "   ).thenAnswer((_) async => [ConnectivityResult.wifi]);",
            "",
            "    controller = ${2:TestControllerClass}();",
            "  });",
            "",
            "  group('tested_function_name', () {",
            "",
            "    String queryRoute = '/v1/clients/open-days';",
            "",
            "    setUp(() {",
            "      // Reset all parameters between tests in this group",
            "    });",
            "",
            "    test('  (Nominal Case)', () async {",
            "final expectedData = [1, 2, 3, 4, 5];",
            "dioService.mockResponse(",
            "typeOfRequest: TypeOfRequest.get,",
            "route: queryRoute,",
            "result: {\"data\": expectedData},",
            ");",
            "final result = await controller.method();",
            "expect(result.fold((l) => null, (r) => r), expectedData);",
            "    });",
            "  });",
            "}"
        ]
    },
    // PROJECT SPECIFIC SNIPPETS
    // "ViewController_Getx": {
    //     "prefix": "viewController_Getx",
    //     "description": "Create the skeleton of a view file using GetX (view+controller+bindings+GetPage)",
    //     "body": [
    //         "// ****************************************",
    //         "//          NAVIGATION SET-UP",
    //         "// ****************************************",
    //         "// Add this to navigation folder/file/Service",
    //         "String ${3:ClassNameWithoutMaj} = '/${3:ClassNameWithoutMaj}';",
    //         "",
    //         "GetPage(",
    //         "  title: '${3:ClassNameWithoutMaj}',",
    //         "  name: ${3:ClassNameWithoutMaj},",
    //         "  page: () => const ${2:ClassName}View(),",
    //         "  binding: ${2:ClassName}Bindings(),",
    //         "),",
    //         "",
    //         "// ****************************************",
    //         "//             BINDING FILE",
    //         "// ****************************************",
    //         "// Change repository with a dependencie if you have one.",
    //         "import 'package:yotta_city/core/service/navigation_service.dart';",
    //         "import 'package:get/get.dart';",
    //         "",
    //         "class ${2:ClassName}Bindings extends Bindings {",
    //         "  @override",
    //         "  void dependencies() {",
    //         "    Get.lazyPut(",
    //         "      () => ${2:ClassName}Controller(",
    //         "        repository: Repository(),",
    //         "      ),",
    //         "    );",
    //         "  }",
    //         "}",
    //         "",
    //         "// ****************************************",
    //         "//             CONTROLLER FILE",
    //         "// ****************************************",
    //         "import 'package:sentry_flutter/sentry_flutter.dart';",
    //         "import 'package:get/get.dart';",
    //         "",
    //         "class ${2:ClassName}Controller extends GetxController with StateMixin {",
    //         "  final Repository repository;",
    //         "",
    //         "  ${2:ClassName}Controller({",
    //         "    required this.repository,",
    //         "  });",
    //         "",
    //         "  @override",
    //         "  void onInit() {",
    //         "    super.onInit();",
    //         "    change(null, status: RxStatus.loading());",
    //         "",
    //         "    try {",
    //         "",
    //         "        (isDataEmpty)",
    //         "            ? change(null, status: RxStatus.empty())",
    //         "            : change(null, status: RxStatus.success());",
    //         "  ",
    //         "    } catch (exception, stackTrace) {",
    //         "      Sentry.captureException(exception, stackTrace: stackTrace);",
    //         "      change(null, status: RxStatus.error());",
    //         "    }",
    //         "  }",
    //         "",
    //         "}",
    //         "",
    //         "// ****************************************",
    //         "//                VIEW FILE",
    //         "// ****************************************   ",
    //         "import 'package:yotta_city/view/common/empty_page.dart';",
    //         "import 'package:yotta_city/view/common/error_page.dart';",
    //         "import 'package:skeletonizer/skeletonizer.dart';",
    //         "import 'package:flutter/material.dart';",
    //         "import 'package:get/get.dart';",
    //         "",
    //         "class ${2:ClassName}View extends GetView<${2:ClassName}Controller> {",
    //         "  const ${2:ClassName}View({super.key});",
    //         "",
    //         "  @override",
    //         "  Widget build(BuildContext context) {",
    //         "return Scaffold(",
    //         "  body: Center(",
    //         "    child: controller.obx(",
    //         "      (state) => buildView(context),",
    //         "      onEmpty: _emptyView(context),",
    //         "      onLoading: _loadingView(context),",
    //         "      onError: (error) => _errorView(context),",
    //         "        ),",
    //         "      ),",
    //         "    );",
    //         "  }",
    //         "",
    //         "  Widget buildView(BuildContext context) {",
    //         "    throw UnimplementedError('TODO: displayed when everything is fine and we have the data.');",
    //         "  }",
    //         "",
    //         "Widget _emptyView(BuildContext context) {",
    //         "  return EmptyPage();",
    //         "}",
    //         "",
    //         "Widget _loadingView(BuildContext context) {",
    //         "  return Skeletonizer(enabled: true, child: buildView(context));",
    //         "}",
    //         "",
    //         "Widget _errorView(BuildContext context) {",
    //         "  return ErrorPage(onPressed: () => controller.onInit());",
    //         "}",
    //         "}",
    //     ]
    // },
    "WidgetController_Getx": {
        "prefix": "widgetController_Getx",
        "description": "Create the skeleton of a widget file using GetX(view+controller)",
        "body": [
            "// ****************************************",
            "//             CONTROLLER FILE",
            "// ****************************************",
            "import 'package:sentry_flutter/sentry_flutter.dart';",
            "import 'package:get/get.dart';",
            "",
            "class ${2:ClassName}Controller extends GetxController with StateMixin {",
            "  final Repository repository;",
            "",
            "  ${2:ClassName}Controller({",
            "    required this.repository,",
            "  });",
            "",
            "  @override",
            "  void onInit() {",
            "    super.onInit();",
            "    change(null, status: RxStatus.loading());",
            "",
            "    try {",
            "      change(null, status: RxStatus.empty());",
            "      change(null, status: RxStatus.success());",
            "    } catch (exception, stackTrace) {",
            "      Sentry.captureException(exception, stackTrace: stackTrace);",
            "      change(null, status: RxStatus.error());",
            "    }",
            "  }",
            "",
            "}",
            "",
            "// ****************************************",
            "//                VIEW",
            "// ****************************************",
            "import 'package:yotta_city/view/common/empty_page.dart';",
            "import 'package:yotta_city/view/common/error_page.dart';",
            "import 'package:skeletonizer/skeletonizer.dart';",
            "import 'package:flutter/material.dart';",
            "import 'package:get/get.dart';",
            "",
            "class ${2:ClassName}Widget extends StatefulWidget {",
            "  final Function(Entity) onChanged;",
            "",
            "  const ${2:ClassName}Widget({super.key, required this.onChanged});",
            "",
            "  @override",
            "  State<${2:ClassName}Widget> createState() => _${2:ClassName}WidgetState();",
            "}",
            "",
            "class _${2:ClassName}WidgetState extends State<${2:ClassName}Widget> {",
            "  late ${2:ClassName}Controller controller;",
            "",
            "  // Store the tag to delete the correct instance",
            "  late String _controllerTag;",
            "",
            "  @override",
            "  void initState() {",
            "    super.initState();",
            "    _controllerTag = UniqueKey().toString();",
            "    controller = Get.put(",
            "      ${2:ClassName}Controller(repository: Repository()),",
            "      tag: _controllerTag,",
            "    );",
            "  }",
            "",
            "  @override",
            "  void dispose() {",
            "    // Crucially: Delete the specific controller instance associated with this widget when the widget is removed from the tree.",
            "    Get.delete<${2:ClassName}Controller>(tag: _controllerTag);",
            "    super.dispose();",
            "  }",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "return controller.obx(",
            "          (state) => buildView(context),",
            "          onEmpty: _emptyView(context),",
            "          onLoading: _loadingView(context),",
            "          onError: (error) => _errorView(context),",
            "        );",
            "  }",
            "",
            "  Widget buildView(BuildContext context) {",
            "    throw UnimplementedError(",
            "      'TODO: displayed when everything is fine and we have the data.',",
            "    );",
            "  }",
            "",
            "Widget _emptyView(BuildContext context) {",
            "  return EmptyPage();",
            "}",
            "",
            "Widget _loadingView(BuildContext context) {",
            "  return Skeletonizer(enabled: true, child: buildView(context));",
            "}",
            "",
            "Widget _errorView(BuildContext context) {",
            "  return ErrorPage(onPressed: () => controller.onInit());",
            "}",
            "}",
        ]
    },
    "ClassAndDto": {
        "prefix": "EntityDtoMapper",
        "description": "Create an Entity with it DTO and it Mapper",
        "body": [
            "// Entity CLASS",
            "import 'package:faker/faker.dart';",
            "",
            "// ****************************************",
            "// After you created this snippet:",
            "//",
            "// - Remove unused attribute like 'final attributeXType attributeX;'",
            "// - Implement Unimplemented methods or remove them if not needed",
            "// - Use this command in the terminal to generate the missing file with freezed:",
            "// ->>> dart run build_runner build --delete-conflicting-outputs",
            "//",
            "// When the files are generated, you can delete this comment",
            "// ****************************************",
            "",
            "// ****************************************",
            "//  ${2:ClassName} Entity",
            "// ****************************************",
            "class ${2:ClassName} {",
            "  final ${3:attribute1Type} ${4:attribute1};",
            "  final ${5:attribute2Type} ${6:attribute2};",
            "  final ${7:attribute3Type} ${8:attribute3};",
            "  final ${9:attribute4Type} ${10:attribute4};",
            "  final ${11:attribute5Type} ${12:attribute5};",
            "  final ${13:attribute6Type} ${14:attribute6};",
            "  final ${15:attribute7Type} ${16:attribute7};",
            "  final ${17:attribute8Type} ${18:attribute8};",
            "  final ${19:attribute9Type} ${20:attribute9};",
            "",
            "  ${2:ClassName}({",
            "    required this.${4:attribute1},",
            "    required this.${6:attribute2},",
            "    required this.${8:attribute3},",
            "    required this.${10:attribute4},",
            "    required this.${12:attribute5},",
            "    required this.${14:attribute6},",
            "    required this.${16:attribute7},",
            "    required this.${18:attribute8},",
            "    required this.${20:attribute9},",
            "  })  : assert(${4:attribute1}Validator(${4:attribute1}) == null),",
            "        assert(${6:attribute2}Validator(${6:attribute2}) == null);",
            "",
            "  ${2:ClassName} copyWith({",
            "    ${3:attribute1Type}? ${4:attribute1},",
            "    ${5:attribute2Type}? ${6:attribute2},",
            "    ${7:attribute3Type}? ${8:attribute3},",
            "    ${9:attribute4Type}? ${10:attribute4},",
            "    ${11:attribute5Type}? ${12:attribute5},",
            "    ${13:attribute6Type}? ${14:attribute6},",
            "    ${15:attribute7Type}? ${16:attribute7},",
            "    ${17:attribute8Type}? ${18:attribute8},",
            "    ${19:attribute9Type}? ${20:attribute9},",
            "  }) {",
            "    return ${2:ClassName}(",
            "      ${4:attribute1}: ${4:attribute1} ?? this.${4:attribute1},",
            "      ${6:attribute2}: ${6:attribute2} ?? this.${6:attribute2},",
            "      ${8:attribute3}: ${8:attribute3} ?? this.${8:attribute3},",
            "      ${10:attribute4}: ${10:attribute4} ?? this.${10:attribute4},",
            "      ${12:attribute5}: ${12:attribute5} ?? this.${12:attribute5},",
            "      ${14:attribute6}: ${14:attribute6} ?? this.${14:attribute6},",
            "      ${16:attribute7}: ${16:attribute7} ?? this.${16:attribute7},",
            "      ${18:attribute8}: ${18:attribute8} ?? this.${18:attribute8},",
            "      ${20:attribute9}: ${20:attribute9} ?? this.${20:attribute9},",
            "    );",
            "  }",
            "",
            "  factory ${2:ClassName}.faker({int seed = 1}) {",
            "    final faker = Faker.withGenerator(RandomGenerator(seed: seed));",
            "    throw UnimplementedError(",
            "      'Check other entities and generate fake values with relevant meaning',",
            "    );",
            "  }",
            "",
            "  static String? ${4:attribute1}Validator(${3:attribute1Type}? ${4:attribute1}) {",
            "    throw UnimplementedError('Use generic validator to check your data');",
            "  }",
            "",
            "  static String? ${6:attribute2}Validator(${5:attribute2Type}? ${6:attribute2}) {",
            "    throw UnimplementedError('Use generic validator to check your data');",
            "  }",
            "}",
            "",
            "// DTO CLASS",
            "// ****************************************",
            "//  ${2:ClassName} DTO",
            "// ****************************************",
            "import 'package:freezed_annotation/freezed_annotation.dart';",
            "",
            "part '${TM_FILENAME_BASE}_dto.freezed.dart';",
            "part '${TM_FILENAME_BASE}_dto.g.dart';",
            "",
            "@freezed",
            "abstract class ${2:ClassName}Dto with _$${2:ClassName}Dto {",
            "  const factory ${2:ClassName}Dto({",
            "    @JsonKey(name: '${4:attribute1}') ${3:attribute1Type}? ${4:attribute1},",
            "    @JsonKey(name: '${6:attribute2}') ${5:attribute2Type}? ${6:attribute2},",
            "    @JsonKey(name: '${8:attribute3}') ${7:attribute3Type}? ${8:attribute3},",
            "    @JsonKey(name: '${10:attribute4}') ${9:attribute4Type}? ${10:attribute4},",
            "    @JsonKey(name: '${12:attribute5}') ${11:attribute5Type}? ${12:attribute5},",
            "    @JsonKey(name: '${14:attribute6}') ${13:attribute6Type}? ${14:attribute6},",
            "    @JsonKey(name: '${16:attribute7}') ${15:attribute7Type}? ${16:attribute7},",
            "    @JsonKey(name: '${18:attribute8}') ${17:attribute8Type}? ${18:attribute8},",
            "    @JsonKey(name: '${20:attribute9}') ${19:attribute9Type}? ${20:attribute9},",
            "  }) = _${2:ClassName}Dto;",
            "",
            "  factory ${2:ClassName}Dto.fromJson(Map<String, dynamic> json) =>",
            "      _$${2:ClassName}DtoFromJson(json);",
            "}",
            "",
            "// MAPPING CLASS",
            "// ****************************************",
            "//  ${2:ClassName} MAPPER",
            "// ****************************************",
            "import 'package:auto_mappr_annotation/auto_mappr_annotation.dart';",
            "",
            "@AutoMappr([",
            "  MapType<${2:ClassName}, ${2:ClassName}Dto>(),",
            "  MapType<${2:ClassName}Dto, ${2:ClassName}>(),",
            "])",
            "class ${2:ClassName}Mapper extends ${2:ClassName}Mapper {}",
        ]
    }
}